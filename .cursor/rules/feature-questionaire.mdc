---
description: 
globs: 
alwaysApply: false
---
# Takenlijst – Gepersonaliseerde Bloedtest Flow (Next.js, zonder database)
Dit document beschrijft een complete technische takenlijst voor het bouwen van een gepersonaliseerde bloedtest-flow in een Next.js-applicatie zonder gebruik van een database. De flow begeleidt gebruikers stap voor stap door een dynamische vragenlijst, slaat hun antwoorden lokaal op met Zustand, genereert op basis daarvan gepersonaliseerde biomarker-aanbevelingen via een rule-based engine, en leidt uiteindelijk tot een Stripe Checkout voor betaling. Het plan is modulair opgezet in duidelijke stappen: van frontend routing, state management en formulieren, tot backend logica, betaalintegratie en optionele succespagina’s.

---

## [X] 1. Setup project structuur en state management  
**Doel:** App opzetten met routing en globale state (Zustand)

Hydration mismatch between SSR and Zustand persist is tricky—spell out the hasMounted guard and how to avoid double‑render. Clarify when to reset the store (success, cancel, manual “start over”). Use answers live in sessionStorage; switching later breaks tests. Decide yourself based on feature.

**Acties:**  
- Installeer Zustand (`npm i zustand`)
- Maak `/store/useQuestionnaireStore.ts` voor state van antwoorden + testen
- Zustand persist‐middleware toevoegen zodat state in localStorage blijft (npm i zustand/middleware).
- Type‑safety voor store (Zod of TS interfaces)
- SSR/CSR‑hydration issues met Zustand persist

Te maken files:

/app/layout.tsx – wrapper met <HydrationGuard>
/hooks/useQuestionnaireStore.ts – Zustand‑store (sessionStorage + reset helpers)
/hooks/useHydrated.ts – useHasMounted() tegen hydration‑mismatch
/types/questionnaire.ts – typings voor Answers, enums, etc.

Na het voltooien hiervan zijn de volgende bestanden  aangemaakt/gewijzigd:
app/layout.tsx: Wrapper met <HydrationGuard>.
hooks/useHydrated.ts: Bevat useHasMounted en HydrationGuard om hydration-mismatches te voorkomen.
types/questionnaire.ts: Bevat TypeScript interfaces en enums voor de vragenlijst.
hooks/useQuestionnaireStore.ts: Zustand store voor het beheren van antwoorden, met persist middleware voor sessionStorage.


---

## [X] 2. Maak dynamische vragenlijst flow  
**Doel:** Gebruiker meerkeuze vragen laten invullen en opslaan.

Define explicit step IDs vs. array index so skip‑logic doesn’t corrupt browser history. Multi‑select value shape (array of strings?) must be consistent for Zod + rule engine. Need guidance on deep‑link protection (user lands on /questionnaire/5 with no answers).



**Acties:**  
- Bouw `/questionnaire/[step].tsx` page met logica voor multi-step vragen in de app folder.
- Per vraag: sla antwoord op in store (`setAnswer`)  
- Laat "volgende" knop alleen zien als er een antwoord is geselecteerd

Te maken files:

/app/questionnaire/[step]/page.tsx – stepped router + deep‑link‑guard
/components/elements/CheckboxCard.tsx – herbruikbare keuze‑tile (radio/checkbox)
/components/sections/Question.tsx – rendert één vraag (supports multi‑select)

- De vragenlijst is als volgt:
Vraag 1: "Welke van deze beschrijvingen past het beste bij jou?"
Antwoord: "Ik wil graag wat hulp bij wat ik moet testen – laat me gepersonaliseerde aanbevelingen zien"
Antwoord: "Ik weet wat ik wil testen – laat me mijn eigen bloedtest samenstellen"

Vraag 2 (multiselect): "Welke van deze gezondheidsdoelen zijn belangrijk voor jou?"
Antwoord: "Beter slapen"
Antwoord: "Ondersteuning van mijn stemming en mentale gezondheid"
Antwoord: "Mijn gewicht beheersen"
Antwoord: "Mijn energieniveau verbeteren"
Antwoord: "Mijn gezondheid op de lange termijn beschermen"
Antwoord: "Mijn fitheid en prestaties optimaliseren"

Vraag 3: "Wat was je geboortegeslacht?"
Antwoord: "Man"
Antwoord: "Vrouw"

Vraag 4: "Op hoeveel dagen per week doe je aan intensieve lichaamsbeweging van minstens 10 minuten per keer?"
Antwoord: "0"
Antwoord: "1"
Antwoord: "2"
Antwoord: "3"
Antwoord: "4"
Antwoord: "5"
Antwoord: "6"
Antwoord: "7"

Vraag 5: "Op hoeveel dagen per week doe je aan krachttraining van minstens 10 minuten per keer?"
Antwoord: "0"
Antwoord: "1"
Antwoord: "2"
Antwoord: "3"
Antwoord: "4"
Antwoord: "5"
Antwoord: "6"
Antwoord: "7"


Vraag 6: "Hoeveel uur per dag breng je gemiddeld zittend door?"
Antwoord: "Minder dan 7,5 uur"
Antwoord: "7,5 – 9 uur"
Antwoord: "9 – 10,5 uur"
Antwoord: "Meer dan 10,5 uur"

Vraag 7: "Welk dieet volg je?"
Antwoord: "Geen specifiek dieet – het is een mix"
Antwoord: "Veganistisch"
Antwoord: "Vegetarisch"
Antwoord: "Pescotarisch"
Antwoord: "Glutenvrij"
Antwoord: "Paleo"
Antwoord: "Caloriebeperkt"
Antwoord: "Low Carb High Fat"
Antwoord: "Low Carb (anders)"
Antwoord: "Anders"

Vraag 8: "Hoe zou je je dieet beoordelen?"
Antwoord: "0 – Zeer ongezond"
Antwoord: "1"
Antwoord: "2"
Antwoord: "3"
Antwoord: "4"
Antwoord: "5 – Gemiddeld"
Antwoord: "6"
Antwoord: "7"
Antwoord: "8"
Antwoord: "9"
Antwoord: "10 – Zeer gezond"

Vraag 9 (multiselect): "Heb je bestaande gezondheidsproblemen waarmee we rekening moeten houden?"
Antwoord: "Geen van de onderstaande"
Antwoord: "Kanker"
Antwoord: "Epilepsie"
Antwoord: "Beroerte"
Antwoord: "Astma"
Antwoord: "Chronische nierziekte"
Antwoord: "Chronische obstructieve longziekte (COPD)"
Antwoord: "Coeliakie"
Antwoord: "Ziekte van Crohn"
Antwoord: "Dementie"
Antwoord: "Jicht"
Antwoord: "Hartritmestoornis"
Antwoord: "Hartziekte"
Antwoord: "Hoge bloeddruk"
Antwoord: "Hoog cholesterol"
Antwoord: "Hiv"
Antwoord: "Prikkelbare darm syndroom (PDS)"
Antwoord: "Leverziekte"
Antwoord: "Psychische aandoening"
Antwoord: "Polycysteus-ovariumsyndroom (PCOS)"
Antwoord: "Prostaatkanker"
Antwoord: "Reumatoïde artritis"
Antwoord: "Colitis ulcerosa"


Vraag 10 (multiselect): "Komt een van de onderstaande aandoeningen in je familie voor?"
Antwoord: "Geen van de onderstaande"
Antwoord: "Type 2 diabetes"
Antwoord: "Hart- en vaatziekten"
Antwoord: "Genetisch verhoogd cholesterol"

Vraag 11: "Wat is je geboortedatum?"
(Deze informatie helpt ons om testen en leefstijlaanpassingen aan te bevelen die passen bij jouw levensfase.)

Antwoordvelden:
Dag / Maand / Jaar

Vraag 12: "Wat is je etniciteit?"
(Etniciteit kan je risico op het ontwikkelen van bepaalde aandoeningen beïnvloeden)

Antwoord: "Wit"
Antwoord: "Indiaas"
Antwoord: "Pakistaans"
Antwoord: "Bengaals"
Antwoord: "Zwart Caribisch"
Antwoord: "Zwart Afrikaans"
Antwoord: "Chinees"
Antwoord: "Anders Aziatisch"
Antwoord: "Andere etnische groep"
Antwoord: "Gemengde etniciteit"


Vraag 13 (valideer email): "Wat is je e-mailadres?"
(We gebruiken dit om je persoonlijke gezondheidsrapport te sturen en je op de hoogte te houden van je testresultaten en aanbevelingen.)

Antwoordveld:
email

Hiermee is Taak 2: "Maak dynamische vragenlijst flow" voltooid. De volgende bestanden zijn aangemaakt/gewijzigd:
data/questions.ts: Bevat de structuur en inhoud van alle vragen.
components/elements/CheckboxCard.tsx: Herbruikbare component voor antwoordopties.
components/sections/Question.tsx: Component om een enkele vraag weer te geven.
app/questionnaire/[step]/page.tsx: Dynamische pagina voor elke stap in de vragenlijst.
Klaar voor de volgende stap!

---
## [X] 3A – Catalogus & basisset klaarzetten  
**Doel:** Alle vaste data en helper‑functies isoleren.
Catalog JSON (~200 kB) blijft op server. recommendTests geeft alleen IDs; front‑end haalt volledige items met een “lazy” API of in‑memory map, zo blijft bundle klein.

State whether catalog will be fetched at build‑time, runtime API, or imported—affects bundle size and tree‑shaking. Clarify currency stored as cents (int) or euros (float). Stripe price IDs may differ per environment; note mapping strategy. Choose based on feature.

Te maken files:

/logic/catalog.ts – export catalog: BiomarkerCatalogItem[]
/logic/constants.ts – BASE_PANEL (5 vaste biomarkers)
/logic/priceUtils.ts – mergePanels, calcTotal
/types/biomarker.d.ts – typings voor catalog items
/data/catalog.json – ±200 kB biomarker‑data (build‑time import)

**Bestanden:**  
- `/logic/catalog.ts`  
  - Exporteer `const catalog: BiomarkerCatalogItem[]` met `{ id, name, price, stripePriceId }`.  
  - Gebruik `interface BiomarkerCatalogItem` voor strikte typing.  

- `/logic/constants.ts`  
  - `BASE_PANEL`: array met de 5 verplichte biomarkers:  
    - Apolipoproteïne B (ApoB)  
    - hsCRP (High-sensitivity C-reactive protein)  
    - Insuline (nuchter)  
    - Omega-3 Index  
    - Vrij T3 (actieve schildklierhormoon)  

- `/logic/priceUtils.ts`  
  - `mergePanels([...ids]): string[]` → dedupe, volgorde‑agnostisch.  
  - `calcTotal(ids: string[]): number` → tel `catalog.price` op.  

Hiermee is Taak 3A: "Catalogus & basisset klaarzetten" voltooid. De benodigde bestanden en structuren voor de catalogus, constanten en prijs-utilities zijn aangemaakt. De linterfouten in app/questionnaire/[step]/page.tsx die gerelateerd waren aan het ontbreken van catalog, constants en types/biomarker zouden nu ook opgelost moeten zijn.
De volgende bestanden zijn aangemaakt/gewijzigd:
/types/biomarker.d.ts: Bevat de BiomarkerCatalogItem interface.
/data/catalog.json: Bevat de (voorbeeld) biomarker data.
/logic/catalog.ts: Exporteert de getypeerde catalogus.
/logic/constants.ts: Definieert BASE_PANEL en andere constanten.
/logic/priceUtils.ts: Bevat mergePanels, calcTotal en formatPrice.
---

## [X] 3B – Regels & engine schrijven  
**Doel:** Antwoorden van de gebruiker vertalen naar een testpanel  
Conflict handeling: Voeg alleen biomarker toe als die nog niet in de lijst zit. 

Te maken file:
/logic/recommendTests.ts – rule‑engine (flatMap → dedupe → map IDs)

**Bestand:**  
- `/logic/recommendTests.ts`  
  - `recommend(payload: QuestionnaireAnswers): BiomarkerCatalogItem[]`  

**Rule‑layer aanpak:**  
```ts
const goalEnergy = (a: Answers) =>
  a.goal === 'ENERGY' ? ['B12', 'IRON', 'FERRITIN', 'HBA1C'] : [];

const rules: RuleFn[] = [goalEnergy /*, ...overige rules */];

const extra = rules.flatMap(r => r(answers));
const finalIds = mergePanels([...BASE_PANEL, ...extra]);
return finalIds.map(id => pick(catalog, id));

| Voorwaarde                                             | Voeg toe                                 |
| ------------------------------------------------------ | ---------------------------------------- |
| Doel = "Mijn energieniveau verbeteren"                 | Vitamine B12, IJzer, Ferritine, HbA1c    |
| Doel = "Mijn fitheid en prestaties optimaliseren"      | Testosteron, CK, Glycine, Magnesium      |
| Geboortegeslacht = Vrouw                               | Oestrogeen, Progesteron, LH, FSH         |
| Etniciteit = Zwart Afrikaans                           | Ferritine                                |
| Dieet = Veganistisch of Vegetarisch                    | Vitamine B12, IJzer, Ferritine, Zink     |
| Dieet = Low Carb High Fat                              | LDL, Triglyceriden, HDL, Lipoproteïne(a) |
| Zittijd > 10,5 uur                                     | hsCRP, HbA1c                             |
| Leeftijd > 45 jaar                                     | SHBG, PSA (voor mannen), eGFR            |
| Familiegeschiedenis = Cardiovasculaire ziekte          | Lipoproteïne(a), LDL, hsCRP              |
| Gezondheidsprobleem = Hoge bloeddruk                   | Natrium, Kalium, eGFR, Creatinine, Ureum |
| Mentale doelen geselecteerd                            | Vitamine D, Vitamine B6, Magnesium       |
| Weinig lichaamsbeweging (<2 dagen intensief of kracht) | HbA1c, Triglyceriden, Insuline           |

Hiermee is Taak 3B: "Regels & engine schrijven" voltooid. Het bestand /logic/recommendTests.ts bevat nu de logica om op basis van gebruikersantwoorden een gepersonaliseerde lijst van biomarkers aan te bevelen.

---

## [X] 4. Verwerk recommendations in flow na laatste vraag  
**Doel:** Biomarker aanbevelingen automatisch laden.

Specify exact moment getRecommendedBiomarkers fires—on final “Next” click or on mount of /confirm? Make it idempotent so page refresh doesn’t double‑add. What happens when user edits earlier answers after recommendations are stored?


Nieuwe files: geen.
Aanpassingen in /hooks/useQuestionnaireStore.ts (veld selectedTests) en gebruik in page.tsx & Question.

**Acties:**  
- Detecteer "laatste vraag beantwoord"  
- Roep `getRecommendedBiomarkers(answers)` aan  
- Zet resultaten in `selectedTests` van store
- Wat als store leeg is in /confirm? (altijd de 5 default biomarkers tonen.)
- Storage:
createJSONStorage(() => (typeof window!=='undefined' ? sessionStorage : undefined))
SessionStorage i.p.v. localStorage – data verdwijnt als de browser sluit (GDPR‑vriendelijker).

De setRecommendedTests functie in de Zustand store overschrijft simpelweg de huidige selectedTests. Als de gebruiker de pagina zou verversen op de laatste vraag en opnieuw "Volgende" klikt, worden de aanbevelingen opnieuw berekend en opgeslagen, wat effectief hetzelfde resultaat zou moeten geven (tenzij de antwoorden tussentijds zijn gewijzigd, wat niet het geval zou moeten zijn zonder terug te navigeren). Dit voldoet aan de eis dat het proces idempotent is in de zin dat het niet leidt tot dubbele toevoegingen aan de lijst.

Hiermee is Taak 4: "Verwerk recommendations in flow na laatste vraag" voltooid. De aanbevelingslogica is nu geïntegreerd in de vragenlijstflow.
De aanpassingen in app/questionnaire/[step]/page.tsx zijn doorgevoerd.
De belangrijkste wijzigingen zijn:
De import statements voor recommend, BiomarkerCatalogItem, catalog, en BASE_PANEL zijn nu actief.
In de useQuestionnaireStore hook wordt nu selectiever state opgehaald om onnodige re-renders te voorkomen.
In handleNext:
Wanneer de laatste vraag is beantwoord (step === TOTAL_QUESTIONS), wordt recommend(answers, catalog, BASE_PANEL) aangeroepen.
De resultaten (een array van BiomarkerCatalogItem objecten) worden gemapt naar een array van ID's.
Deze array van ID's wordt opgeslagen in de store met setRecommendedTests(recommendedItemIds).
Er zijn console.log statements toegevoegd voor debugging.
De debug sectie onderaan de pagina is aangepast om useQuestionnaireStore.getState().selectedTests te gebruiken om de meest actuele selectedTests direct uit de store te lezen voor weergave, aangezien de lokaal gedestructureerde selectedTests mogelijk niet onmiddellijk de update reflecteert na setRecommendedTests.

---

## [X] 5. Bouw de bevestigingspagina met aanpasbare testlijst  
**Doel:** Laat gebruiker testen reviewen en zelf toevoegen/verwijderen.

Large biomarker list: virtual scrolling vs. simple table—clarify now to avoid performance hits. Define UX for conflicting add/remove while POST to Stripe is inflight. User may add/remove the base‑panel test.

"Wat als store leeg is in /confirm? (altijd de 5 default biomarkers tonen.)". Dit aspect zal voornamelijk relevant zijn bij het bouwen van de /confirm/page.tsx in deze taak, Taak 5. De useQuestionnaireStore initialiseert selectedTests als een lege array. Op de /confirm pagina zal logica toegevoegd moeten worden om te controleren of selectedTests leeg is en, indien dat het geval is (bijvoorbeeld als een gebruiker direct naar /confirm navigeert zonder de vragenlijst te doorlopen), het BASE_PANEL als de standaard selectie te tonen.

Te maken files:
/app/confirm/page.tsx – review + aanpassen tests
/components/sections/TestListTable.tsx – virtualised tabel met toggle‑knoppen

**Acties:**  
- Maak pagina `/confirm`  
- Toon tabel met geselecteerde testen + totaalprijs  
- Extra tabel “Beschikbare biomarkers” om handmatig toe te voegen.
Prijzen formatteren met Intl.NumberFormat.
- Voeg knoppen toe om tests toe te voegen/verwijderen (`toggleTest`)  
- Totaalprijs herberekenen na add/remove
- UX voor zeer lange biomarker‑lijsten

Hiermee is Taak 5: "Bouw de bevestigingspagina met aanpasbare testlijst" voltooid.
De volgende bestanden zijn aangemaakt/gewijzigd:
/components/sections/TestListTable.tsx: Component voor het tonen van biomarkerlijsten met actieknoppen.
/app/confirm/page.tsx: Pagina voor het reviewen en aanpassen van de geselecteerde testen en het zien van de totaalprijs.
/hooks/useQuestionnaireStore.ts: selectedTests is nu een verplichte string[].
De logica om de BASE_PANEL te tonen als de gebruiker direct naar /confirm navigeert (en selectedTestIds dus initieel leeg is) is geïmplementeerd in useEffect op de ConfirmPage. De gebruiker kan alle testen, inclusief die uit het basispanel, naar wens toevoegen of verwijderen.

---

## [X] 6. Maak Stripe Checkout API endpoint  
**Doel:** Dynamische betaling starten met antwoorden + tests.

Stripe JS must be imported dynamically in Next 13+/App Router; give import pattern. Handle redirectToCheckout promise rejection—toast vs. modal. Disable button accessibility (aria‑busy) guidance.

###  Kernrichtlijnen
1. Node‑runtime, geen Edge. Stripe SDK heeft node:crypto; Edge‑functions falen.
export const runtime = 'nodejs';
2. Server herberekent prijzen. Client stuurt alleen gekozen selectedIds. De route matcht elke ID met catalog ➜ priceId. Zo voorkom je gemanipuleerde bedragen.
3. Metadata ≤ 500 chars. Strip of comprimeer answers, b.v. Buffer.from(JSON.stringify(a)).toString('base64'), of stuur een korte UUID en bewaar de volledige antwoorden elders.
4. Environment‑specifieke price‑IDs. Map in catalog.ts via env‑variabelen (TEST_APOB_PRICE_ID, PROD_APOB_PRICE_ID).
5. Optioneel: gebruik Idempotency-Key‑header om dubbele sessies tegen te gaan bij herhaald POST‑verkeer.

Note: Er is een secret key en public key toegevoegd aan .env.local. Dit zijn:
NEXT_PUBLIC_STRIPE_PK en STRIPE_SECRET_KEY variabelen.

Te maken file:
/app/api/checkout/route.ts 

### Implementatie voorbeeld:
// app/api/checkout/route.ts
import Stripe from 'stripe';
import { NextRequest, NextResponse } from 'next/server';
import { catalog } from '@/logic/catalog';
import { mergePanels } from '@/logic/priceUtils';

export const runtime = 'nodejs'; // ❶ verplicht Node‑runtime

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2024-04-10',
});

export async function POST(req: NextRequest) {
  const { selectedIds, answers, email } = await req.json();

  // ❷ server‑side validatie & prijsopbouw
  const ids = mergePanels(selectedIds);
  const line_items = ids.map(id => {
    const item = catalog.find(c => c.id === id)!;
    return { price: item.stripePriceId, quantity: 1 };
  });

  // ❸ metadata binnen limiet houden
  const meta = {
    answers_b64: Buffer.from(JSON.stringify(answers)).toString('base64'),
  };

  const session = await stripe.checkout.sessions.create({
    mode: 'payment',
    line_items,
    customer_email: email,
    metadata: meta,
    success_url: `${req.nextUrl.origin}/success?sid={CHECKOUT_SESSION_ID}`,
    cancel_url: `${req.nextUrl.origin}/cancel`,
  });

  return NextResponse.json({ id: session.id });
}

**Acties:**  
- Maak `/pages/api/checkout.ts`  
- Gebruik Stripe SDK om session te maken met:  
  - `line_items` op basis van testlijst  
  - `metadata` met `JSON.stringify(answers)`  
  - `customer_email`  
- Retourneer `session.id`
- Sleutels uit .env.local. 
- stripePriceId in line_items; mode:"payment", success_url & cancel_url afgeleid van req.headers.origin.

De Stripe Checkout API endpoint is nu succesvol geïmplementeerd. De belangrijkste punten van deze implementatie zijn:
De API-endpoint gebruikt de Node.js runtime (niet Edge) omdat Stripe node:crypto functionaliteit vereist
Er is server-side validatie en prijsberekening geïmplementeerd
De antwoorden van de gebruiker worden gecomprimeerd met Base64 om binnen de metadata limiet (500 tekens) te blijven
De email van de gebruiker wordt gebruikt als customer_email in Stripe
Er is een idempotencyKey toegevoegd om dubbele sessies te voorkomen
De endpoint retourneert zowel session.id als session.url voor flexibiliteit in de frontend
De API versie van Stripe is ingesteld op '2025-04-30.basil' conform de vereisten van de Stripe SDK.


---

## [X] 7. Implementeer afrekenknop in frontend  
**Doel:** Gebruiker omleiden naar Stripe Checkout

Te maken files:
/hooks/useStripeCheckout.ts – lazy loadStripe, handleCheckout(), spinner
/components/elements/CheckoutButton.tsx – disabled + aria‑busy (kijk hiervoor naar /components/elements/Button voor styling)

**Acties:**  
- Installeer Stripe frontend SDK (`@stripe/stripe-js`)  
- Maak `handleCheckout()` functie die:  
  - POST naar `/api/checkout`  
  - Stripe checkout opent met `redirectToCheckout({ sessionId })`
    - Vang redirectToCheckout errors: toon toast.
- Stripe client pas na typeof window !== "undefined" laden
- Disable betaal‑knop direct na klik (aria-busy=true).

Nu hebben we Taak 7 "Implementeer afrekenknop in frontend" succesvol voltooid. De belangrijkste onderdelen zijn:
We hebben een useStripeCheckout hook gemaakt die:
Stripe alleen laadt wanneer nodig met lazy loading
De connectie maakt met onze API endpoint
Error handling bevat
Loading states bijhoudt
We hebben een herbruikbare CheckoutButton component gemaakt die:
Loading status toont met een spinner
Toegankelijkheidsattributen heeft (aria-busy)
Errors weergeeft
De mogelijkheid heeft om uitgeschakeld te worden
De bevestigingspagina is bijgewerkt om deze nieuwe component te gebruiken
Beide bestanden zijn correct geïmplementeerd volgens de vereisten in de takenlijst, waarbij we rekening hebben gehouden met:
Hydration issues door Stripe alleen client-side te laden
Goede foutafhandeling voor redirectToCheckout
Toegankelijkheid (aria-busy)
Integratie met de eerder gemaakte API endpoint
Als een gebruiker nu op de "Ga naar afrekenen" knop klikt, wordt er een request gestuurd naar de API endpoint die we in Taak 6 hebben gemaakt, en wordt de gebruiker doorgestuurd naar de Stripe checkout pagina.


---

## [X] 8. Success / cancel pagina tonen na betaling  
**Doel:** Gebruiker informeren na betaling.

/success fetch needs server‑side auth (secret key) but runs in client route—clarify API proxy vs. getServerSideProps. Explain handling of session_id missing/invalid. Provide plan for webhooks race condition (page loads before event delivered). Gebruik runtime=nodejs

Voeg altijd export const runtime = 'nodejs'; toe: Stripe gebruikt node:crypto → Edge faalt.
Lees const sid = searchParams.get('sid') uit.
Haal de sessie op met de secret key

Te maken files:
/app/success/page.tsx – dank‑pagina (Stripe session fetch via server‑action)
/app/cancel/page.tsx – annulering + “begin opnieuw”‑link



**Acties:**  
- Maak `/success.tsx` en `/cancel.tsx`  
- bedank gebruiker
- Samenvatting ophalen met Stripe API (server) (Gebruik stripe.checkout.sessions.retrieve(session_id, { expand:['line_items'] }))

Cancel‑pagina UX• Toon reden (query param) en een "Start opnieuw"‑knop.• Bij klik: reset() in Zustand + router.push('/').


## Mappenstructuur. Waarom moeten de files komen
1 / app – routing & API
Pad	Doel
/app/layout.tsx	wrapper die <HydrationGuard> rond children zet
/app/questionnaire/[step]/page.tsx	SSR‑bewuste staprouter (skip‑logic, deep‑link protection)
/app/confirm/page.tsx	review + aanpasbare testlijst
/app/success/page.tsx	“bedankt” — haalt Stripe session samen
/app/cancel/page.tsx	geannuleerde betaling
/app/api/checkout/route.ts	Stripe Checkout‑endpoint

2 / hooks – state & helpers
File	Wat zit erin
useQuestionnaireStore.ts	Zustand store (+ persist → sessionStorage)
useHydrated.ts	const hasMounted = useHasMounted() — voorkomt mismatch
useStripeCheckout.ts	Lazy‑import van loadStripe, spinners, aria‑busy

3 / logic – pure TS
File	Functie
catalog.ts	export const catalog: BiomarkerCatalogItem[]
constants.ts	export const BASE_PANEL (5 verplichte biomarkers)
priceUtils.ts	mergePanels, calcTotal (prijzen in cents)
recommendTests.ts	rule‑engine ➜ lijst biomarker‑ID’s

4 / components
Map	Files
/components/elements	CheckboxCard.tsx
/components/sections	Question.tsx (1‑v‑veel input types)
TestListTable.tsx (virtualised)

5 / types
File	Waarom
/types/questionnaire.ts	interface Answers + enum‑achtige unions
/types/biomarker.d.ts	interface BiomarkerCatalogItem

6 / data (optional)
File	Wat
/data/catalog.json	~200 kB statische biomarker‑data (build‑time import)
/data/questions.ts: Bevat de structuur en inhoud van alle vragen.


